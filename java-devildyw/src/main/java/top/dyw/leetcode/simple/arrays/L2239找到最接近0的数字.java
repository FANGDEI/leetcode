package top.dyw.leetcode.simple.arrays;

/**
 * @author dingyangwei001
 * @description 描述
 * @date 2025/01/20 10:47
 **/
@SuppressWarnings("all")
public class L2239找到最接近0的数字 {

    public static void main(String[] args) {
        System.out.println(new L2239找到最接近0的数字().findClosestNumber(new int[]{}));
    }

    public int findClosestNumber(int[] nums) {
        Integer distance = Integer.MAX_VALUE;
        int res = 0;

        for (int i = 0; i < nums.length; i++) {
            Integer tempDistance = Math.abs(nums[i]);
            if (tempDistance < distance){
                distance = tempDistance;
                res = nums[i];
            } else if (tempDistance.equals(distance)) {
                res = Math.max(res, nums[i]);
            }

        }
        return res;
    }
}
